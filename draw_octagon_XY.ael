/*
函数名: draw_octagon_XY
功能: 绘制一个八边形图形,可以设置X和Y方向的长度
参数:
    centerX - 八边形中心X坐标
    centerY - 八边形中心Y坐标  
    lengthX - 八边形X方向的长度
    lengthY - 八边形Y方向的长度
    cornerK - 八边形拐角系数(0-1),控制八边形拐角的大小
    pathWidth - 导线宽度
    LayerName - 绘制所在的层名
返回值: 无
注意事项:
    1. 八边形的拐角大小由cornerK参数控制,取值范围0-1
    2. 拐角实际大小还与X/Y方向长度的最小值相关
    3. 图形会在指定中心点位置绘制
*/
defun draw_octagon_XY(centerX, centerY, lengthX, lengthY, cornerK, pathWidth, LayerName)
{    
    // 获取当前设计上下文
    decl context = de_get_current_design_context();
    
    // 获取指定层的ID和层号
    decl layerId = db_get_layerid(context, LayerName, "drawing");
    decl layerNum = db_get_layer_number(layerId);

    // 设置当前绘制层
    de_set_layer(layerNum);

    // 计算X和Y方向长度的最小值,用于计算拐角大小
    decl Lengthmin = min2(lengthX, lengthY);

    // 设置导线属性
    de_set_path_width(pathWidth);  // 设置导线宽度
    de_set_path_corner(DB_SQUARE_CORNER);  // 设置方形拐角
    
    // 开始绘制八边形电感主体
    de_add_path();

    // 按顺序添加12个顶点坐标,构成八边形电感形状
    de_add_point(centerX + lengthX/2.0, centerY);          // 端口1内端点
    
    // 八边形的8个顶点
    de_add_point(centerX + lengthX/2.0,  centerY + lengthY/2.0 - cornerK * Lengthmin/2.0);
    de_add_point(centerX + lengthX/2.0 - cornerK * Lengthmin/2.0, centerY +  lengthY/2.0);
    de_add_point(centerX + -1*(lengthX/2.0 - cornerK * Lengthmin/2.0), centerY + lengthY/2.0);
    de_add_point(centerX + -1*lengthX/2.0, centerY + lengthY/2.0 - cornerK * Lengthmin/2.0);
    de_add_point(centerX + -1*lengthX/2.0, centerY + -1*(lengthY/2.0 - cornerK * Lengthmin/2.0));
    de_add_point(centerX + -1*(lengthX/2.0 - cornerK * Lengthmin/2.0), centerY + -1*lengthY/2.0);
    de_add_point(centerX + lengthX/2.0 - cornerK * Lengthmin/2.0, centerY + -1*lengthY/2.0);
    de_add_point(centerX + lengthX/2.0, centerY + -1*(lengthY/2 - cornerK * Lengthmin/2.0));

    de_add_point(centerX + lengthX/2.0, centerY);          // 端口2内端点
    
    // 结束路径绘制
    de_end();
}
